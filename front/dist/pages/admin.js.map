{
  "version": 3,
  "sources": ["../../src/pages/modules/search.ts", "../../src/pages/admin.ts"],
  "sourcesContent": ["export const searchInput = qi(\"#search\");\n\nexport function search() {\n    const openUserDetails = new Set<HTMLElement>();\n    document.querySelectorAll<HTMLElement>(\".user[open]\").forEach(userElement => {\n        openUserDetails.add(userElement);\n    });\n\n    const searchTerm = searchInput.value.toLowerCase().trim();\n    const filters = {\n        user: [] as string[],\n        name: [] as string[],\n        file: [] as string[],\n        text: [] as string[],\n    };\n\n    const terms = searchTerm.split(/\\s+/).filter(Boolean);\n    terms.forEach(term => {\n        const separatorIndex = term.indexOf(\":\");\n\n        if (separatorIndex > 0 && separatorIndex < term.length - 1) {\n            const key = term.substring(0, separatorIndex);\n            const value = term.substring(separatorIndex + 1);\n            switch (key) {\n                case \"user\":\n                    filters.user.push(value);\n                    break;\n                case \"name\":\n                    filters.name.push(value);\n                    break;\n                case \"file\":\n                    filters.file.push(value);\n                    break;\n                default:\n                    filters.text.push(term);\n                    break;\n            }\n        } else {\n            filters.text.push(term);\n        }\n    });\n\n    const allUserElements = document.querySelectorAll<HTMLElement>(\".user\");\n\n    allUserElements.forEach(userElement => {\n        const userName = userElement.querySelector(\"summary\")?.textContent?.toLowerCase() || \"\";\n        const mailElements = userElement.querySelectorAll<HTMLElement>(\".mails-container > ul > li\");\n        let userHasVisibleMails = false;\n\n        mailElements.forEach(mailElement => {\n            const mailName = mailElement.querySelector(\"h3\")?.textContent?.toLowerCase() || \"\";\n            const fileLinks = mailElement.querySelectorAll<HTMLAnchorElement>(\".files-container a\");\n            const fileNames = Array.from(fileLinks).map(f => f.dataset.filename?.toLowerCase() || \"\");\n\n            // mask (user:$user eg)\n            const userMatch = filters.user.length === 0 || filters.user.some(term => userName.includes(term));\n            const nameMatch = filters.name.length === 0 || filters.name.some(term => mailName.includes(term));\n            const fileMatch = filters.file.length === 0 || filters.file.some(term => fileNames.some(fn => fn.includes(term)));\n\n            // normal text\n            const allTextContent = [userName, mailName, ...fileNames];\n            const textMatch = filters.text.length === 0 || filters.text.every(term => allTextContent.some(content => content.includes(term)));\n\n            if (userMatch && nameMatch && fileMatch && textMatch) {\n                (mailElement as HTMLElement).style.display = \"\";\n                userHasVisibleMails = true;\n            } else {\n                (mailElement as HTMLElement).style.display = \"none\";\n            }\n        });\n\n        if (userHasVisibleMails) {\n            userElement.style.display = \"\";\n            if (openUserDetails.has(userElement) || searchTerm)\n                userElement.setAttribute(\"open\", \"\");\n        } else {\n            userElement.style.display = \"none\";\n            userElement.removeAttribute(\"open\");\n        }\n    });\n}\n\nsearchInput.addEventListener(\"input\", () => search());", "import \"../utils/requireLogin\";\nimport { checkTokenRefresh } from \"../utils/tokenRefresh\";\nimport \"./admin.scss\";\nimport { displayFiles, initShow } from \"./modules/displayFiles\";\nimport { getMailBody, getMailDateElement, sort } from \"./modules/mailUtils\";\nimport { search, searchInput } from \"./modules/search\";\nimport { Mail } from \"./modules/types\";\n\ncheckTokenRefresh();\nconst app = qs(\"#app\");\nconst notifications = qs(\"#notifications\");\n\ninterface User {\n    name: string;\n    mails: Mail[];\n}\n\nconst data = await fetch(\"/api/admin/user-data\").then(res => res.json()) as User[];\n\nif (data) {\n    app.innerHTML = data.sort((a, b) => b.name.localeCompare(a.name)).map(user => {\n        const mails = sort(user.mails).map(mail => {\n            return `\n                <li>\n                    <h3>${mail.name}</h3>\n                    ${getMailDateElement(mail._id)}\n                    ${getMailBody(mail.txt)}\n                    <button class=\"show\" data-id=\"${mail._id}\">View Files</button>\n                    <div class=\"files-container\" data-id=\"files-${mail._id}\"></div>\n                </li>\n            `\n        }).join(\"\");\n\n        const r = `\n            <details class=\"user\" data-id=\"user-details-${user.name}\">\n                <summary>${user.name}</summary>\n                <div class=\"mails-container\">\n                    <ul>\n                        ${mails}\n                    </ul>\n                </div>\n            </details>\n        `\n        return r;\n    }).join(\"\");\n\n    data.forEach(user => {\n        user.mails.forEach(mail => {\n            displayFiles({\n                name: mail.name,\n                files: mail.files,\n                apiPath: \"/api/admin/files\",\n                user: user.name,\n                containerId: `files-${mail._id}`\n            });\n        });\n    });\n\n    initShow(app);\n    setTimeout(() => {\n        if (searchInput.value) search();\n    }, 10);\n} else {\n    app.innerHTML = `<p class=\"error-message\">Could not connect to the server.</p>`;\n}\n\nconst event = new EventSource(\"/api/admin/sse\");\n\nevent.onmessage = (event) => {\n    const mail = JSON.parse(event.data) as Mail & { user: string };\n\n    const mailEl = document.createElement(\"li\");\n    mailEl.style.backgroundColor = \"#444\";\n    mailEl.innerHTML = `\n        <h3 style=\"text-decoration: underline;\" title=\"New mail\">${mail.name}</h3>\n        ${getMailDateElement(mail._id)}\n        ${getMailBody(mail.txt)}\n        <button class=\"show\" data-id=\"${mail._id}\">View Files</button>\n        <div class=\"files-container\" data-id=\"files-${mail._id}\"></div>\n    `;\n\n    let userUl = qs(`user-details-${mail.user}`, 1).qs(\"ul\");\n    if (!userUl) {\n        const userContainer = document.createElement(\"details\");\n        userContainer.innerHTML = `\n            <summary style=\"text-decoration: underline;\" title=\"New user\">${mail.user}</summary>\n            <div class=\"mails-container\"><ul></ul></div>\n        `;\n        userContainer.dataset.id = `user-details-${mail.user}`;\n        userContainer.style.backgroundColor = \"#333\";\n        app.appendChild(userContainer);\n        userUl = qs(`user-details-${mail.user}`, 1).qs(\"ul\");\n        userContainer.addEventListener(\"click\", () => {\n            userContainer.style.backgroundColor = \"\";\n            userContainer.qs(\"summary\").style.textDecoration = \"\";\n        }, { once: true });\n    }\n\n    userUl.addUp(mailEl);\n    mailEl.addEventListener(\"click\", () => {\n        mailEl.style.backgroundColor = \"\";\n        mailEl.qs(\"h3\").style.textDecoration = \"\";\n    }, { once: true });\n\n    displayFiles({\n        name: mail.name,\n        files: mail.files,\n        apiPath: \"/api/admin/files\",\n        user: mail.user,\n        containerId: `files-${mail._id}`\n    });\n    if (searchInput.value) search();\n\n    const notification = document.createElement(\"li\");\n    notification.innerHTML = `<b>${mail.user}</b> - <b>${mail.name}</b>`;\n    notifications.appendChild(notification);\n    notification.addEventListener(\"click\", () => {\n        notification.remove();\n        searchInput.v(`user:${mail.user} name:${mail.name}`);\n        search();\n    }, { once: true });\n}"],
  "mappings": "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",
  "names": ["searchInput", "search", "openUserDetails", "userElement", "searchTerm", "filters", "term", "separatorIndex", "key", "value", "userName", "mailElements", "userHasVisibleMails", "mailElement", "mailName", "fileLinks", "fileNames", "f", "userMatch", "nameMatch", "fileMatch", "fn", "allTextContent", "textMatch", "content", "__name", "checkTokenRefresh", "app", "notifications", "data", "res", "b", "user", "mails", "sort", "mail", "getMailDateElement", "getMailBody", "displayFiles", "initShow", "searchInput", "search", "event", "mailEl", "userUl", "userContainer", "notification"]
}
